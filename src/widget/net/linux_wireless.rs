/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __IncompleteArrayField<T> {}
pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const _K_SS_MAXSIZE: u32 = 128;
pub const __UAPI_DEF_IF_IFCONF: u32 = 1;
pub const __UAPI_DEF_IF_IFMAP: u32 = 1;
pub const __UAPI_DEF_IF_IFNAMSIZ: u32 = 1;
pub const __UAPI_DEF_IF_IFREQ: u32 = 1;
pub const __UAPI_DEF_IF_NET_DEVICE_FLAGS: u32 = 1;
pub const __UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO: u32 = 1;
pub const __UAPI_DEF_IN_ADDR: u32 = 1;
pub const __UAPI_DEF_IN_IPPROTO: u32 = 1;
pub const __UAPI_DEF_IN_PKTINFO: u32 = 1;
pub const __UAPI_DEF_IP_MREQ: u32 = 1;
pub const __UAPI_DEF_SOCKADDR_IN: u32 = 1;
pub const __UAPI_DEF_IN_CLASS: u32 = 1;
pub const __UAPI_DEF_IN6_ADDR: u32 = 1;
pub const __UAPI_DEF_IN6_ADDR_ALT: u32 = 1;
pub const __UAPI_DEF_SOCKADDR_IN6: u32 = 1;
pub const __UAPI_DEF_IPV6_MREQ: u32 = 1;
pub const __UAPI_DEF_IPPROTO_V6: u32 = 1;
pub const __UAPI_DEF_IPV6_OPTIONS: u32 = 1;
pub const __UAPI_DEF_IN6_PKTINFO: u32 = 1;
pub const __UAPI_DEF_IP6_MTUINFO: u32 = 1;
pub const __UAPI_DEF_SOCKADDR_IPX: u32 = 1;
pub const __UAPI_DEF_IPX_ROUTE_DEFINITION: u32 = 1;
pub const __UAPI_DEF_IPX_INTERFACE_DEFINITION: u32 = 1;
pub const __UAPI_DEF_IPX_CONFIG_DATA: u32 = 1;
pub const __UAPI_DEF_IPX_ROUTE_DEF: u32 = 1;
pub const __UAPI_DEF_XATTR: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 28;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_MAX: u32 = 44;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_MAX: u32 = 44;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOMAXCONN: u32 = 128;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP: u32 = 35078;
pub const SIOCGSTAMPNS: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SO_MARK: u32 = 36;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const __osockaddr_defined: u32 = 1;
pub const IFNAMSIZ: u32 = 16;
pub const IFALIASZ: u32 = 256;
pub const GENERIC_HDLC_VERSION: u32 = 4;
pub const CLOCK_DEFAULT: u32 = 0;
pub const CLOCK_EXT: u32 = 1;
pub const CLOCK_INT: u32 = 2;
pub const CLOCK_TXINT: u32 = 3;
pub const CLOCK_TXFROMRX: u32 = 4;
pub const ENCODING_DEFAULT: u32 = 0;
pub const ENCODING_NRZ: u32 = 1;
pub const ENCODING_NRZI: u32 = 2;
pub const ENCODING_FM_MARK: u32 = 3;
pub const ENCODING_FM_SPACE: u32 = 4;
pub const ENCODING_MANCHESTER: u32 = 5;
pub const PARITY_DEFAULT: u32 = 0;
pub const PARITY_NONE: u32 = 1;
pub const PARITY_CRC16_PR0: u32 = 2;
pub const PARITY_CRC16_PR1: u32 = 3;
pub const PARITY_CRC16_PR0_CCITT: u32 = 4;
pub const PARITY_CRC16_PR1_CCITT: u32 = 5;
pub const PARITY_CRC32_PR0_CCITT: u32 = 6;
pub const PARITY_CRC32_PR1_CCITT: u32 = 7;
pub const LMI_DEFAULT: u32 = 0;
pub const LMI_NONE: u32 = 1;
pub const LMI_ANSI: u32 = 2;
pub const LMI_CCITT: u32 = 3;
pub const LMI_CISCO: u32 = 4;
pub const IF_GET_IFACE: u32 = 1;
pub const IF_GET_PROTO: u32 = 2;
pub const IF_IFACE_V35: u32 = 4096;
pub const IF_IFACE_V24: u32 = 4097;
pub const IF_IFACE_X21: u32 = 4098;
pub const IF_IFACE_T1: u32 = 4099;
pub const IF_IFACE_E1: u32 = 4100;
pub const IF_IFACE_SYNC_SERIAL: u32 = 4101;
pub const IF_IFACE_X21D: u32 = 4102;
pub const IF_PROTO_HDLC: u32 = 8192;
pub const IF_PROTO_PPP: u32 = 8193;
pub const IF_PROTO_CISCO: u32 = 8194;
pub const IF_PROTO_FR: u32 = 8195;
pub const IF_PROTO_FR_ADD_PVC: u32 = 8196;
pub const IF_PROTO_FR_DEL_PVC: u32 = 8197;
pub const IF_PROTO_X25: u32 = 8198;
pub const IF_PROTO_HDLC_ETH: u32 = 8199;
pub const IF_PROTO_FR_ADD_ETH_PVC: u32 = 8200;
pub const IF_PROTO_FR_DEL_ETH_PVC: u32 = 8201;
pub const IF_PROTO_FR_PVC: u32 = 8202;
pub const IF_PROTO_FR_ETH_PVC: u32 = 8203;
pub const IF_PROTO_RAW: u32 = 8204;
pub const IFHWADDRLEN: u32 = 6;
pub const WIRELESS_EXT: u32 = 22;
pub const SIOCSIWCOMMIT: u32 = 35584;
pub const SIOCGIWNAME: u32 = 35585;
pub const SIOCSIWNWID: u32 = 35586;
pub const SIOCGIWNWID: u32 = 35587;
pub const SIOCSIWFREQ: u32 = 35588;
pub const SIOCGIWFREQ: u32 = 35589;
pub const SIOCSIWMODE: u32 = 35590;
pub const SIOCGIWMODE: u32 = 35591;
pub const SIOCSIWSENS: u32 = 35592;
pub const SIOCGIWSENS: u32 = 35593;
pub const SIOCSIWRANGE: u32 = 35594;
pub const SIOCGIWRANGE: u32 = 35595;
pub const SIOCSIWPRIV: u32 = 35596;
pub const SIOCGIWPRIV: u32 = 35597;
pub const SIOCSIWSTATS: u32 = 35598;
pub const SIOCGIWSTATS: u32 = 35599;
pub const SIOCSIWSPY: u32 = 35600;
pub const SIOCGIWSPY: u32 = 35601;
pub const SIOCSIWTHRSPY: u32 = 35602;
pub const SIOCGIWTHRSPY: u32 = 35603;
pub const SIOCSIWAP: u32 = 35604;
pub const SIOCGIWAP: u32 = 35605;
pub const SIOCGIWAPLIST: u32 = 35607;
pub const SIOCSIWSCAN: u32 = 35608;
pub const SIOCGIWSCAN: u32 = 35609;
pub const SIOCSIWESSID: u32 = 35610;
pub const SIOCGIWESSID: u32 = 35611;
pub const SIOCSIWNICKN: u32 = 35612;
pub const SIOCGIWNICKN: u32 = 35613;
pub const SIOCSIWRATE: u32 = 35616;
pub const SIOCGIWRATE: u32 = 35617;
pub const SIOCSIWRTS: u32 = 35618;
pub const SIOCGIWRTS: u32 = 35619;
pub const SIOCSIWFRAG: u32 = 35620;
pub const SIOCGIWFRAG: u32 = 35621;
pub const SIOCSIWTXPOW: u32 = 35622;
pub const SIOCGIWTXPOW: u32 = 35623;
pub const SIOCSIWRETRY: u32 = 35624;
pub const SIOCGIWRETRY: u32 = 35625;
pub const SIOCSIWENCODE: u32 = 35626;
pub const SIOCGIWENCODE: u32 = 35627;
pub const SIOCSIWPOWER: u32 = 35628;
pub const SIOCGIWPOWER: u32 = 35629;
pub const SIOCSIWGENIE: u32 = 35632;
pub const SIOCGIWGENIE: u32 = 35633;
pub const SIOCSIWMLME: u32 = 35606;
pub const SIOCSIWAUTH: u32 = 35634;
pub const SIOCGIWAUTH: u32 = 35635;
pub const SIOCSIWENCODEEXT: u32 = 35636;
pub const SIOCGIWENCODEEXT: u32 = 35637;
pub const SIOCSIWPMKSA: u32 = 35638;
pub const SIOCIWFIRSTPRIV: u32 = 35808;
pub const SIOCIWLASTPRIV: u32 = 35839;
pub const SIOCIWFIRST: u32 = 35584;
pub const SIOCIWLAST: u32 = 35839;
pub const IWEVTXDROP: u32 = 35840;
pub const IWEVQUAL: u32 = 35841;
pub const IWEVCUSTOM: u32 = 35842;
pub const IWEVREGISTERED: u32 = 35843;
pub const IWEVEXPIRED: u32 = 35844;
pub const IWEVGENIE: u32 = 35845;
pub const IWEVMICHAELMICFAILURE: u32 = 35846;
pub const IWEVASSOCREQIE: u32 = 35847;
pub const IWEVASSOCRESPIE: u32 = 35848;
pub const IWEVPMKIDCAND: u32 = 35849;
pub const IWEVFIRST: u32 = 35840;
pub const IW_PRIV_TYPE_MASK: u32 = 28672;
pub const IW_PRIV_TYPE_NONE: u32 = 0;
pub const IW_PRIV_TYPE_BYTE: u32 = 4096;
pub const IW_PRIV_TYPE_CHAR: u32 = 8192;
pub const IW_PRIV_TYPE_INT: u32 = 16384;
pub const IW_PRIV_TYPE_FLOAT: u32 = 20480;
pub const IW_PRIV_TYPE_ADDR: u32 = 24576;
pub const IW_PRIV_SIZE_FIXED: u32 = 2048;
pub const IW_PRIV_SIZE_MASK: u32 = 2047;
pub const IW_MAX_FREQUENCIES: u32 = 32;
pub const IW_MAX_BITRATES: u32 = 32;
pub const IW_MAX_TXPOWER: u32 = 8;
pub const IW_MAX_SPY: u32 = 8;
pub const IW_MAX_AP: u32 = 64;
pub const IW_ESSID_MAX_SIZE: u32 = 32;
pub const IW_MODE_AUTO: u32 = 0;
pub const IW_MODE_ADHOC: u32 = 1;
pub const IW_MODE_INFRA: u32 = 2;
pub const IW_MODE_MASTER: u32 = 3;
pub const IW_MODE_REPEAT: u32 = 4;
pub const IW_MODE_SECOND: u32 = 5;
pub const IW_MODE_MONITOR: u32 = 6;
pub const IW_MODE_MESH: u32 = 7;
pub const IW_QUAL_QUAL_UPDATED: u32 = 1;
pub const IW_QUAL_LEVEL_UPDATED: u32 = 2;
pub const IW_QUAL_NOISE_UPDATED: u32 = 4;
pub const IW_QUAL_ALL_UPDATED: u32 = 7;
pub const IW_QUAL_DBM: u32 = 8;
pub const IW_QUAL_QUAL_INVALID: u32 = 16;
pub const IW_QUAL_LEVEL_INVALID: u32 = 32;
pub const IW_QUAL_NOISE_INVALID: u32 = 64;
pub const IW_QUAL_RCPI: u32 = 128;
pub const IW_QUAL_ALL_INVALID: u32 = 112;
pub const IW_FREQ_AUTO: u32 = 0;
pub const IW_FREQ_FIXED: u32 = 1;
pub const IW_MAX_ENCODING_SIZES: u32 = 8;
pub const IW_ENCODING_TOKEN_MAX: u32 = 64;
pub const IW_ENCODE_INDEX: u32 = 255;
pub const IW_ENCODE_FLAGS: u32 = 65280;
pub const IW_ENCODE_MODE: u32 = 61440;
pub const IW_ENCODE_DISABLED: u32 = 32768;
pub const IW_ENCODE_ENABLED: u32 = 0;
pub const IW_ENCODE_RESTRICTED: u32 = 16384;
pub const IW_ENCODE_OPEN: u32 = 8192;
pub const IW_ENCODE_NOKEY: u32 = 2048;
pub const IW_ENCODE_TEMP: u32 = 1024;
pub const IW_POWER_ON: u32 = 0;
pub const IW_POWER_TYPE: u32 = 61440;
pub const IW_POWER_PERIOD: u32 = 4096;
pub const IW_POWER_TIMEOUT: u32 = 8192;
pub const IW_POWER_MODE: u32 = 3840;
pub const IW_POWER_UNICAST_R: u32 = 256;
pub const IW_POWER_MULTICAST_R: u32 = 512;
pub const IW_POWER_ALL_R: u32 = 768;
pub const IW_POWER_FORCE_S: u32 = 1024;
pub const IW_POWER_REPEATER: u32 = 2048;
pub const IW_POWER_MODIFIER: u32 = 15;
pub const IW_POWER_MIN: u32 = 1;
pub const IW_POWER_MAX: u32 = 2;
pub const IW_POWER_RELATIVE: u32 = 4;
pub const IW_TXPOW_TYPE: u32 = 255;
pub const IW_TXPOW_DBM: u32 = 0;
pub const IW_TXPOW_MWATT: u32 = 1;
pub const IW_TXPOW_RELATIVE: u32 = 2;
pub const IW_TXPOW_RANGE: u32 = 4096;
pub const IW_RETRY_ON: u32 = 0;
pub const IW_RETRY_TYPE: u32 = 61440;
pub const IW_RETRY_LIMIT: u32 = 4096;
pub const IW_RETRY_LIFETIME: u32 = 8192;
pub const IW_RETRY_MODIFIER: u32 = 255;
pub const IW_RETRY_MIN: u32 = 1;
pub const IW_RETRY_MAX: u32 = 2;
pub const IW_RETRY_RELATIVE: u32 = 4;
pub const IW_RETRY_SHORT: u32 = 16;
pub const IW_RETRY_LONG: u32 = 32;
pub const IW_SCAN_DEFAULT: u32 = 0;
pub const IW_SCAN_ALL_ESSID: u32 = 1;
pub const IW_SCAN_THIS_ESSID: u32 = 2;
pub const IW_SCAN_ALL_FREQ: u32 = 4;
pub const IW_SCAN_THIS_FREQ: u32 = 8;
pub const IW_SCAN_ALL_MODE: u32 = 16;
pub const IW_SCAN_THIS_MODE: u32 = 32;
pub const IW_SCAN_ALL_RATE: u32 = 64;
pub const IW_SCAN_THIS_RATE: u32 = 128;
pub const IW_SCAN_TYPE_ACTIVE: u32 = 0;
pub const IW_SCAN_TYPE_PASSIVE: u32 = 1;
pub const IW_SCAN_MAX_DATA: u32 = 4096;
pub const IW_SCAN_CAPA_NONE: u32 = 0;
pub const IW_SCAN_CAPA_ESSID: u32 = 1;
pub const IW_SCAN_CAPA_BSSID: u32 = 2;
pub const IW_SCAN_CAPA_CHANNEL: u32 = 4;
pub const IW_SCAN_CAPA_MODE: u32 = 8;
pub const IW_SCAN_CAPA_RATE: u32 = 16;
pub const IW_SCAN_CAPA_TYPE: u32 = 32;
pub const IW_SCAN_CAPA_TIME: u32 = 64;
pub const IW_CUSTOM_MAX: u32 = 256;
pub const IW_GENERIC_IE_MAX: u32 = 1024;
pub const IW_MLME_DEAUTH: u32 = 0;
pub const IW_MLME_DISASSOC: u32 = 1;
pub const IW_MLME_AUTH: u32 = 2;
pub const IW_MLME_ASSOC: u32 = 3;
pub const IW_AUTH_INDEX: u32 = 4095;
pub const IW_AUTH_FLAGS: u32 = 61440;
pub const IW_AUTH_WPA_VERSION: u32 = 0;
pub const IW_AUTH_CIPHER_PAIRWISE: u32 = 1;
pub const IW_AUTH_CIPHER_GROUP: u32 = 2;
pub const IW_AUTH_KEY_MGMT: u32 = 3;
pub const IW_AUTH_TKIP_COUNTERMEASURES: u32 = 4;
pub const IW_AUTH_DROP_UNENCRYPTED: u32 = 5;
pub const IW_AUTH_80211_AUTH_ALG: u32 = 6;
pub const IW_AUTH_WPA_ENABLED: u32 = 7;
pub const IW_AUTH_RX_UNENCRYPTED_EAPOL: u32 = 8;
pub const IW_AUTH_ROAMING_CONTROL: u32 = 9;
pub const IW_AUTH_PRIVACY_INVOKED: u32 = 10;
pub const IW_AUTH_CIPHER_GROUP_MGMT: u32 = 11;
pub const IW_AUTH_MFP: u32 = 12;
pub const IW_AUTH_WPA_VERSION_DISABLED: u32 = 1;
pub const IW_AUTH_WPA_VERSION_WPA: u32 = 2;
pub const IW_AUTH_WPA_VERSION_WPA2: u32 = 4;
pub const IW_AUTH_CIPHER_NONE: u32 = 1;
pub const IW_AUTH_CIPHER_WEP40: u32 = 2;
pub const IW_AUTH_CIPHER_TKIP: u32 = 4;
pub const IW_AUTH_CIPHER_CCMP: u32 = 8;
pub const IW_AUTH_CIPHER_WEP104: u32 = 16;
pub const IW_AUTH_CIPHER_AES_CMAC: u32 = 32;
pub const IW_AUTH_KEY_MGMT_802_1X: u32 = 1;
pub const IW_AUTH_KEY_MGMT_PSK: u32 = 2;
pub const IW_AUTH_ALG_OPEN_SYSTEM: u32 = 1;
pub const IW_AUTH_ALG_SHARED_KEY: u32 = 2;
pub const IW_AUTH_ALG_LEAP: u32 = 4;
pub const IW_AUTH_ROAMING_ENABLE: u32 = 0;
pub const IW_AUTH_ROAMING_DISABLE: u32 = 1;
pub const IW_AUTH_MFP_DISABLED: u32 = 0;
pub const IW_AUTH_MFP_OPTIONAL: u32 = 1;
pub const IW_AUTH_MFP_REQUIRED: u32 = 2;
pub const IW_ENCODE_SEQ_MAX_SIZE: u32 = 8;
pub const IW_ENCODE_ALG_NONE: u32 = 0;
pub const IW_ENCODE_ALG_WEP: u32 = 1;
pub const IW_ENCODE_ALG_TKIP: u32 = 2;
pub const IW_ENCODE_ALG_CCMP: u32 = 3;
pub const IW_ENCODE_ALG_PMK: u32 = 4;
pub const IW_ENCODE_ALG_AES_CMAC: u32 = 5;
pub const IW_ENCODE_EXT_TX_SEQ_VALID: u32 = 1;
pub const IW_ENCODE_EXT_RX_SEQ_VALID: u32 = 2;
pub const IW_ENCODE_EXT_GROUP_KEY: u32 = 4;
pub const IW_ENCODE_EXT_SET_TX_KEY: u32 = 8;
pub const IW_MICFAILURE_KEY_ID: u32 = 3;
pub const IW_MICFAILURE_GROUP: u32 = 4;
pub const IW_MICFAILURE_PAIRWISE: u32 = 8;
pub const IW_MICFAILURE_STAKEY: u32 = 16;
pub const IW_MICFAILURE_COUNT: u32 = 96;
pub const IW_ENC_CAPA_WPA: u32 = 1;
pub const IW_ENC_CAPA_WPA2: u32 = 2;
pub const IW_ENC_CAPA_CIPHER_TKIP: u32 = 4;
pub const IW_ENC_CAPA_CIPHER_CCMP: u32 = 8;
pub const IW_ENC_CAPA_4WAY_HANDSHAKE: u32 = 16;
pub const IW_PMKSA_ADD: u32 = 1;
pub const IW_PMKSA_REMOVE: u32 = 2;
pub const IW_PMKSA_FLUSH: u32 = 3;
pub const IW_PMKID_LEN: u32 = 16;
pub const IW_PMKID_CAND_PREAUTH: u32 = 1;
pub const IW_EV_LCP_PK_LEN: u32 = 4;
pub const IW_EV_CHAR_PK_LEN: u32 = 20;
pub const IW_EV_POINT_PK_LEN: u32 = 8;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
pub type __kernel_sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __kernel_sockaddr_storage {
    pub ss_family: __kernel_sa_family_t,
    pub __data: [::std::os::raw::c_char; 126usize],
    pub __bindgen_align: [u64; 0usize],
}
#[test]
fn bindgen_test_layout___kernel_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_sockaddr_storage))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__kernel_sockaddr_storage>())).ss_family as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__kernel_sockaddr_storage>())).__data as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_sockaddr_storage),
            "::",
            stringify!(__data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = u32;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_padding as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_align as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
pub const MSG_OOB: _bindgen_ty_1 = 1;
pub const MSG_PEEK: _bindgen_ty_1 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_1 = 4;
pub const MSG_CTRUNC: _bindgen_ty_1 = 8;
pub const MSG_PROXY: _bindgen_ty_1 = 16;
pub const MSG_TRUNC: _bindgen_ty_1 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_1 = 64;
pub const MSG_EOR: _bindgen_ty_1 = 128;
pub const MSG_WAITALL: _bindgen_ty_1 = 256;
pub const MSG_FIN: _bindgen_ty_1 = 512;
pub const MSG_SYN: _bindgen_ty_1 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_1 = 2048;
pub const MSG_RST: _bindgen_ty_1 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_1 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_1 = 16384;
pub const MSG_MORE: _bindgen_ty_1 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_1 = 65536;
pub const MSG_BATCH: _bindgen_ty_1 = 262144;
pub const MSG_ZEROCOPY: _bindgen_ty_1 = 67108864;
pub const MSG_FASTOPEN: _bindgen_ty_1 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_1 = 1073741824;
pub type _bindgen_ty_1 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_namelen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iov as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iovlen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_control as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_controllen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_onoff as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_linger as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    assert_eq!(
        ::std::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub const SHUT_RD: _bindgen_ty_3 = 0;
pub const SHUT_WR: _bindgen_ty_3 = 1;
pub const SHUT_RDWR: _bindgen_ty_3 = 2;
pub type _bindgen_ty_3 = u32;
extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sync_serial_settings {
    pub clock_rate: ::std::os::raw::c_uint,
    pub clock_type: ::std::os::raw::c_uint,
    pub loopback: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_sync_serial_settings() {
    assert_eq!(
        ::std::mem::size_of::<sync_serial_settings>(),
        12usize,
        concat!("Size of: ", stringify!(sync_serial_settings))
    );
    assert_eq!(
        ::std::mem::align_of::<sync_serial_settings>(),
        4usize,
        concat!("Alignment of ", stringify!(sync_serial_settings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sync_serial_settings>())).clock_rate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sync_serial_settings),
            "::",
            stringify!(clock_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sync_serial_settings>())).clock_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sync_serial_settings),
            "::",
            stringify!(clock_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sync_serial_settings>())).loopback as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sync_serial_settings),
            "::",
            stringify!(loopback)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct te1_settings {
    pub clock_rate: ::std::os::raw::c_uint,
    pub clock_type: ::std::os::raw::c_uint,
    pub loopback: ::std::os::raw::c_ushort,
    pub slot_map: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_te1_settings() {
    assert_eq!(
        ::std::mem::size_of::<te1_settings>(),
        16usize,
        concat!("Size of: ", stringify!(te1_settings))
    );
    assert_eq!(
        ::std::mem::align_of::<te1_settings>(),
        4usize,
        concat!("Alignment of ", stringify!(te1_settings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<te1_settings>())).clock_rate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(te1_settings),
            "::",
            stringify!(clock_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<te1_settings>())).clock_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(te1_settings),
            "::",
            stringify!(clock_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<te1_settings>())).loopback as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(te1_settings),
            "::",
            stringify!(loopback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<te1_settings>())).slot_map as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(te1_settings),
            "::",
            stringify!(slot_map)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct raw_hdlc_proto {
    pub encoding: ::std::os::raw::c_ushort,
    pub parity: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_raw_hdlc_proto() {
    assert_eq!(
        ::std::mem::size_of::<raw_hdlc_proto>(),
        4usize,
        concat!("Size of: ", stringify!(raw_hdlc_proto))
    );
    assert_eq!(
        ::std::mem::align_of::<raw_hdlc_proto>(),
        2usize,
        concat!("Alignment of ", stringify!(raw_hdlc_proto))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<raw_hdlc_proto>())).encoding as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(raw_hdlc_proto),
            "::",
            stringify!(encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<raw_hdlc_proto>())).parity as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(raw_hdlc_proto),
            "::",
            stringify!(parity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fr_proto {
    pub t391: ::std::os::raw::c_uint,
    pub t392: ::std::os::raw::c_uint,
    pub n391: ::std::os::raw::c_uint,
    pub n392: ::std::os::raw::c_uint,
    pub n393: ::std::os::raw::c_uint,
    pub lmi: ::std::os::raw::c_ushort,
    pub dce: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_fr_proto() {
    assert_eq!(
        ::std::mem::size_of::<fr_proto>(),
        24usize,
        concat!("Size of: ", stringify!(fr_proto))
    );
    assert_eq!(
        ::std::mem::align_of::<fr_proto>(),
        4usize,
        concat!("Alignment of ", stringify!(fr_proto))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fr_proto>())).t391 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fr_proto),
            "::",
            stringify!(t391)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fr_proto>())).t392 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fr_proto),
            "::",
            stringify!(t392)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fr_proto>())).n391 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fr_proto),
            "::",
            stringify!(n391)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fr_proto>())).n392 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fr_proto),
            "::",
            stringify!(n392)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fr_proto>())).n393 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fr_proto),
            "::",
            stringify!(n393)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fr_proto>())).lmi as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fr_proto),
            "::",
            stringify!(lmi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fr_proto>())).dce as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(fr_proto),
            "::",
            stringify!(dce)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fr_proto_pvc {
    pub dlci: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_fr_proto_pvc() {
    assert_eq!(
        ::std::mem::size_of::<fr_proto_pvc>(),
        4usize,
        concat!("Size of: ", stringify!(fr_proto_pvc))
    );
    assert_eq!(
        ::std::mem::align_of::<fr_proto_pvc>(),
        4usize,
        concat!("Alignment of ", stringify!(fr_proto_pvc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fr_proto_pvc>())).dlci as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fr_proto_pvc),
            "::",
            stringify!(dlci)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fr_proto_pvc_info {
    pub dlci: ::std::os::raw::c_uint,
    pub master: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_fr_proto_pvc_info() {
    assert_eq!(
        ::std::mem::size_of::<fr_proto_pvc_info>(),
        20usize,
        concat!("Size of: ", stringify!(fr_proto_pvc_info))
    );
    assert_eq!(
        ::std::mem::align_of::<fr_proto_pvc_info>(),
        4usize,
        concat!("Alignment of ", stringify!(fr_proto_pvc_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fr_proto_pvc_info>())).dlci as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fr_proto_pvc_info),
            "::",
            stringify!(dlci)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fr_proto_pvc_info>())).master as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fr_proto_pvc_info),
            "::",
            stringify!(master)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cisco_proto {
    pub interval: ::std::os::raw::c_uint,
    pub timeout: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cisco_proto() {
    assert_eq!(
        ::std::mem::size_of::<cisco_proto>(),
        8usize,
        concat!("Size of: ", stringify!(cisco_proto))
    );
    assert_eq!(
        ::std::mem::align_of::<cisco_proto>(),
        4usize,
        concat!("Alignment of ", stringify!(cisco_proto))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cisco_proto>())).interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cisco_proto),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cisco_proto>())).timeout as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cisco_proto),
            "::",
            stringify!(timeout)
        )
    );
}
pub const net_device_flags_IFF_UP: net_device_flags = 1;
pub const net_device_flags_IFF_BROADCAST: net_device_flags = 2;
pub const net_device_flags_IFF_DEBUG: net_device_flags = 4;
pub const net_device_flags_IFF_LOOPBACK: net_device_flags = 8;
pub const net_device_flags_IFF_POINTOPOINT: net_device_flags = 16;
pub const net_device_flags_IFF_NOTRAILERS: net_device_flags = 32;
pub const net_device_flags_IFF_RUNNING: net_device_flags = 64;
pub const net_device_flags_IFF_NOARP: net_device_flags = 128;
pub const net_device_flags_IFF_PROMISC: net_device_flags = 256;
pub const net_device_flags_IFF_ALLMULTI: net_device_flags = 512;
pub const net_device_flags_IFF_MASTER: net_device_flags = 1024;
pub const net_device_flags_IFF_SLAVE: net_device_flags = 2048;
pub const net_device_flags_IFF_MULTICAST: net_device_flags = 4096;
pub const net_device_flags_IFF_PORTSEL: net_device_flags = 8192;
pub const net_device_flags_IFF_AUTOMEDIA: net_device_flags = 16384;
pub const net_device_flags_IFF_DYNAMIC: net_device_flags = 32768;
pub const net_device_flags_IFF_LOWER_UP: net_device_flags = 65536;
pub const net_device_flags_IFF_DORMANT: net_device_flags = 131072;
pub const net_device_flags_IFF_ECHO: net_device_flags = 262144;
pub type net_device_flags = u32;
pub const IF_OPER_UNKNOWN: _bindgen_ty_4 = 0;
pub const IF_OPER_NOTPRESENT: _bindgen_ty_4 = 1;
pub const IF_OPER_DOWN: _bindgen_ty_4 = 2;
pub const IF_OPER_LOWERLAYERDOWN: _bindgen_ty_4 = 3;
pub const IF_OPER_TESTING: _bindgen_ty_4 = 4;
pub const IF_OPER_DORMANT: _bindgen_ty_4 = 5;
pub const IF_OPER_UP: _bindgen_ty_4 = 6;
pub type _bindgen_ty_4 = u32;
pub const IF_LINK_MODE_DEFAULT: _bindgen_ty_5 = 0;
pub const IF_LINK_MODE_DORMANT: _bindgen_ty_5 = 1;
pub type _bindgen_ty_5 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifmap {
    pub mem_start: ::std::os::raw::c_ulong,
    pub mem_end: ::std::os::raw::c_ulong,
    pub base_addr: ::std::os::raw::c_ushort,
    pub irq: ::std::os::raw::c_uchar,
    pub dma: ::std::os::raw::c_uchar,
    pub port: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_ifmap() {
    assert_eq!(
        ::std::mem::size_of::<ifmap>(),
        24usize,
        concat!("Size of: ", stringify!(ifmap))
    );
    assert_eq!(
        ::std::mem::align_of::<ifmap>(),
        8usize,
        concat!("Alignment of ", stringify!(ifmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifmap>())).mem_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifmap),
            "::",
            stringify!(mem_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifmap>())).mem_end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifmap),
            "::",
            stringify!(mem_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifmap>())).base_addr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ifmap),
            "::",
            stringify!(base_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifmap>())).irq as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(ifmap),
            "::",
            stringify!(irq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifmap>())).dma as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(ifmap),
            "::",
            stringify!(dma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifmap>())).port as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ifmap),
            "::",
            stringify!(port)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct if_settings {
    pub type_: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_uint,
    pub ifs_ifsu: if_settings__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union if_settings__bindgen_ty_1 {
    pub raw_hdlc: *mut raw_hdlc_proto,
    pub cisco: *mut cisco_proto,
    pub fr: *mut fr_proto,
    pub fr_pvc: *mut fr_proto_pvc,
    pub fr_pvc_info: *mut fr_proto_pvc_info,
    pub sync: *mut sync_serial_settings,
    pub te1: *mut te1_settings,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_if_settings__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<if_settings__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(if_settings__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<if_settings__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(if_settings__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<if_settings__bindgen_ty_1>())).raw_hdlc as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(if_settings__bindgen_ty_1),
            "::",
            stringify!(raw_hdlc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_settings__bindgen_ty_1>())).cisco as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(if_settings__bindgen_ty_1),
            "::",
            stringify!(cisco)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_settings__bindgen_ty_1>())).fr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(if_settings__bindgen_ty_1),
            "::",
            stringify!(fr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<if_settings__bindgen_ty_1>())).fr_pvc as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(if_settings__bindgen_ty_1),
            "::",
            stringify!(fr_pvc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<if_settings__bindgen_ty_1>())).fr_pvc_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(if_settings__bindgen_ty_1),
            "::",
            stringify!(fr_pvc_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_settings__bindgen_ty_1>())).sync as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(if_settings__bindgen_ty_1),
            "::",
            stringify!(sync)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_settings__bindgen_ty_1>())).te1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(if_settings__bindgen_ty_1),
            "::",
            stringify!(te1)
        )
    );
}
#[test]
fn bindgen_test_layout_if_settings() {
    assert_eq!(
        ::std::mem::size_of::<if_settings>(),
        16usize,
        concat!("Size of: ", stringify!(if_settings))
    );
    assert_eq!(
        ::std::mem::align_of::<if_settings>(),
        8usize,
        concat!("Alignment of ", stringify!(if_settings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_settings>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(if_settings),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_settings>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(if_settings),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_settings>())).ifs_ifsu as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(if_settings),
            "::",
            stringify!(ifs_ifsu)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifreq {
    pub ifr_ifrn: ifreq__bindgen_ty_1,
    pub ifr_ifru: ifreq__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifreq__bindgen_ty_1 {
    pub ifrn_name: [::std::os::raw::c_char; 16usize],
    _bindgen_union_align: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_ifreq__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ifreq__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(ifreq__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ifreq__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(ifreq__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifreq__bindgen_ty_1>())).ifrn_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_1),
            "::",
            stringify!(ifrn_name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifreq__bindgen_ty_2 {
    pub ifru_addr: sockaddr,
    pub ifru_dstaddr: sockaddr,
    pub ifru_broadaddr: sockaddr,
    pub ifru_netmask: sockaddr,
    pub ifru_hwaddr: sockaddr,
    pub ifru_flags: ::std::os::raw::c_short,
    pub ifru_ivalue: ::std::os::raw::c_int,
    pub ifru_mtu: ::std::os::raw::c_int,
    pub ifru_map: ifmap,
    pub ifru_slave: [::std::os::raw::c_char; 16usize],
    pub ifru_newname: [::std::os::raw::c_char; 16usize],
    pub ifru_data: *mut ::std::os::raw::c_void,
    pub ifru_settings: if_settings,
    _bindgen_union_align: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_ifreq__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<ifreq__bindgen_ty_2>(),
        24usize,
        concat!("Size of: ", stringify!(ifreq__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<ifreq__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(ifreq__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_dstaddr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_dstaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_broadaddr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_broadaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_netmask as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_netmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_hwaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_hwaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_ivalue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_ivalue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_mtu as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_mtu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_map as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_slave as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_slave)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_newname as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_newname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_settings as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_settings)
        )
    );
}
#[test]
fn bindgen_test_layout_ifreq() {
    assert_eq!(
        ::std::mem::size_of::<ifreq>(),
        40usize,
        concat!("Size of: ", stringify!(ifreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ifreq>(),
        8usize,
        concat!("Alignment of ", stringify!(ifreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifreq>())).ifr_ifrn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq),
            "::",
            stringify!(ifr_ifrn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifreq>())).ifr_ifru as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq),
            "::",
            stringify!(ifr_ifru)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifconf {
    pub ifc_len: ::std::os::raw::c_int,
    pub ifc_ifcu: ifconf__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifconf__bindgen_ty_1 {
    pub ifcu_buf: *mut ::std::os::raw::c_char,
    pub ifcu_req: *mut ifreq,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_ifconf__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ifconf__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ifconf__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ifconf__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ifconf__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifconf__bindgen_ty_1>())).ifcu_buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifconf__bindgen_ty_1),
            "::",
            stringify!(ifcu_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifconf__bindgen_ty_1>())).ifcu_req as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifconf__bindgen_ty_1),
            "::",
            stringify!(ifcu_req)
        )
    );
}
#[test]
fn bindgen_test_layout_ifconf() {
    assert_eq!(
        ::std::mem::size_of::<ifconf>(),
        16usize,
        concat!("Size of: ", stringify!(ifconf))
    );
    assert_eq!(
        ::std::mem::align_of::<ifconf>(),
        8usize,
        concat!("Alignment of ", stringify!(ifconf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifconf>())).ifc_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifconf),
            "::",
            stringify!(ifc_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifconf>())).ifc_ifcu as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifconf),
            "::",
            stringify!(ifc_ifcu)
        )
    );
}
/// TYPES
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iw_param {
    pub value: __s32,
    pub fixed: __u8,
    pub disabled: __u8,
    pub flags: __u16,
}
#[test]
fn bindgen_test_layout_iw_param() {
    assert_eq!(
        ::std::mem::size_of::<iw_param>(),
        8usize,
        concat!("Size of: ", stringify!(iw_param))
    );
    assert_eq!(
        ::std::mem::align_of::<iw_param>(),
        4usize,
        concat!("Alignment of ", stringify!(iw_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_param>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_param),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_param>())).fixed as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_param),
            "::",
            stringify!(fixed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_param>())).disabled as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_param),
            "::",
            stringify!(disabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_param>())).flags as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_param),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iw_point {
    pub pointer: *mut ::std::os::raw::c_void,
    pub length: __u16,
    pub flags: __u16,
}
#[test]
fn bindgen_test_layout_iw_point() {
    assert_eq!(
        ::std::mem::size_of::<iw_point>(),
        16usize,
        concat!("Size of: ", stringify!(iw_point))
    );
    assert_eq!(
        ::std::mem::align_of::<iw_point>(),
        8usize,
        concat!("Alignment of ", stringify!(iw_point))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_point>())).pointer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_point),
            "::",
            stringify!(pointer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_point>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_point),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_point>())).flags as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_point),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iw_freq {
    pub m: __s32,
    pub e: __s16,
    pub i: __u8,
    pub flags: __u8,
}
#[test]
fn bindgen_test_layout_iw_freq() {
    assert_eq!(
        ::std::mem::size_of::<iw_freq>(),
        8usize,
        concat!("Size of: ", stringify!(iw_freq))
    );
    assert_eq!(
        ::std::mem::align_of::<iw_freq>(),
        4usize,
        concat!("Alignment of ", stringify!(iw_freq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_freq>())).m as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_freq),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_freq>())).e as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_freq),
            "::",
            stringify!(e)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_freq>())).i as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_freq),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_freq>())).flags as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_freq),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iw_quality {
    pub qual: __u8,
    pub level: __u8,
    pub noise: __u8,
    pub updated: __u8,
}
#[test]
fn bindgen_test_layout_iw_quality() {
    assert_eq!(
        ::std::mem::size_of::<iw_quality>(),
        4usize,
        concat!("Size of: ", stringify!(iw_quality))
    );
    assert_eq!(
        ::std::mem::align_of::<iw_quality>(),
        1usize,
        concat!("Alignment of ", stringify!(iw_quality))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_quality>())).qual as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_quality),
            "::",
            stringify!(qual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_quality>())).level as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_quality),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_quality>())).noise as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_quality),
            "::",
            stringify!(noise)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_quality>())).updated as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_quality),
            "::",
            stringify!(updated)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iw_discarded {
    pub nwid: __u32,
    pub code: __u32,
    pub fragment: __u32,
    pub retries: __u32,
    pub misc: __u32,
}
#[test]
fn bindgen_test_layout_iw_discarded() {
    assert_eq!(
        ::std::mem::size_of::<iw_discarded>(),
        20usize,
        concat!("Size of: ", stringify!(iw_discarded))
    );
    assert_eq!(
        ::std::mem::align_of::<iw_discarded>(),
        4usize,
        concat!("Alignment of ", stringify!(iw_discarded))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_discarded>())).nwid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_discarded),
            "::",
            stringify!(nwid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_discarded>())).code as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_discarded),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_discarded>())).fragment as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_discarded),
            "::",
            stringify!(fragment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_discarded>())).retries as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_discarded),
            "::",
            stringify!(retries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_discarded>())).misc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_discarded),
            "::",
            stringify!(misc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iw_missed {
    pub beacon: __u32,
}
#[test]
fn bindgen_test_layout_iw_missed() {
    assert_eq!(
        ::std::mem::size_of::<iw_missed>(),
        4usize,
        concat!("Size of: ", stringify!(iw_missed))
    );
    assert_eq!(
        ::std::mem::align_of::<iw_missed>(),
        4usize,
        concat!("Alignment of ", stringify!(iw_missed))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_missed>())).beacon as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_missed),
            "::",
            stringify!(beacon)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iw_thrspy {
    pub addr: sockaddr,
    pub qual: iw_quality,
    pub low: iw_quality,
    pub high: iw_quality,
}
#[test]
fn bindgen_test_layout_iw_thrspy() {
    assert_eq!(
        ::std::mem::size_of::<iw_thrspy>(),
        28usize,
        concat!("Size of: ", stringify!(iw_thrspy))
    );
    assert_eq!(
        ::std::mem::align_of::<iw_thrspy>(),
        2usize,
        concat!("Alignment of ", stringify!(iw_thrspy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_thrspy>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_thrspy),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_thrspy>())).qual as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_thrspy),
            "::",
            stringify!(qual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_thrspy>())).low as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_thrspy),
            "::",
            stringify!(low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_thrspy>())).high as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_thrspy),
            "::",
            stringify!(high)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iw_scan_req {
    pub scan_type: __u8,
    pub essid_len: __u8,
    pub num_channels: __u8,
    pub flags: __u8,
    pub bssid: sockaddr,
    pub essid: [__u8; 32usize],
    pub min_channel_time: __u32,
    pub max_channel_time: __u32,
    pub channel_list: [iw_freq; 32usize],
}
#[test]
fn bindgen_test_layout_iw_scan_req() {
    assert_eq!(
        ::std::mem::size_of::<iw_scan_req>(),
        316usize,
        concat!("Size of: ", stringify!(iw_scan_req))
    );
    assert_eq!(
        ::std::mem::align_of::<iw_scan_req>(),
        4usize,
        concat!("Alignment of ", stringify!(iw_scan_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_scan_req>())).scan_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_scan_req),
            "::",
            stringify!(scan_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_scan_req>())).essid_len as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_scan_req),
            "::",
            stringify!(essid_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_scan_req>())).num_channels as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_scan_req),
            "::",
            stringify!(num_channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_scan_req>())).flags as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_scan_req),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_scan_req>())).bssid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_scan_req),
            "::",
            stringify!(bssid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_scan_req>())).essid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_scan_req),
            "::",
            stringify!(essid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_scan_req>())).min_channel_time as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_scan_req),
            "::",
            stringify!(min_channel_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_scan_req>())).max_channel_time as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_scan_req),
            "::",
            stringify!(max_channel_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_scan_req>())).channel_list as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_scan_req),
            "::",
            stringify!(channel_list)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct iw_encode_ext {
    pub ext_flags: __u32,
    pub tx_seq: [__u8; 8usize],
    pub rx_seq: [__u8; 8usize],
    pub addr: sockaddr,
    pub alg: __u16,
    pub key_len: __u16,
    pub key: __IncompleteArrayField<__u8>,
}
#[test]
fn bindgen_test_layout_iw_encode_ext() {
    assert_eq!(
        ::std::mem::size_of::<iw_encode_ext>(),
        40usize,
        concat!("Size of: ", stringify!(iw_encode_ext))
    );
    assert_eq!(
        ::std::mem::align_of::<iw_encode_ext>(),
        4usize,
        concat!("Alignment of ", stringify!(iw_encode_ext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_encode_ext>())).ext_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_encode_ext),
            "::",
            stringify!(ext_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_encode_ext>())).tx_seq as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_encode_ext),
            "::",
            stringify!(tx_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_encode_ext>())).rx_seq as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_encode_ext),
            "::",
            stringify!(rx_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_encode_ext>())).addr as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_encode_ext),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_encode_ext>())).alg as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_encode_ext),
            "::",
            stringify!(alg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_encode_ext>())).key_len as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_encode_ext),
            "::",
            stringify!(key_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_encode_ext>())).key as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_encode_ext),
            "::",
            stringify!(key)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iw_mlme {
    pub cmd: __u16,
    pub reason_code: __u16,
    pub addr: sockaddr,
}
#[test]
fn bindgen_test_layout_iw_mlme() {
    assert_eq!(
        ::std::mem::size_of::<iw_mlme>(),
        20usize,
        concat!("Size of: ", stringify!(iw_mlme))
    );
    assert_eq!(
        ::std::mem::align_of::<iw_mlme>(),
        2usize,
        concat!("Alignment of ", stringify!(iw_mlme))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_mlme>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_mlme),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_mlme>())).reason_code as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_mlme),
            "::",
            stringify!(reason_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_mlme>())).addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_mlme),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iw_pmksa {
    pub cmd: __u32,
    pub bssid: sockaddr,
    pub pmkid: [__u8; 16usize],
}
#[test]
fn bindgen_test_layout_iw_pmksa() {
    assert_eq!(
        ::std::mem::size_of::<iw_pmksa>(),
        36usize,
        concat!("Size of: ", stringify!(iw_pmksa))
    );
    assert_eq!(
        ::std::mem::align_of::<iw_pmksa>(),
        4usize,
        concat!("Alignment of ", stringify!(iw_pmksa))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_pmksa>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_pmksa),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_pmksa>())).bssid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_pmksa),
            "::",
            stringify!(bssid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_pmksa>())).pmkid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_pmksa),
            "::",
            stringify!(pmkid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iw_michaelmicfailure {
    pub flags: __u32,
    pub src_addr: sockaddr,
    pub tsc: [__u8; 8usize],
}
#[test]
fn bindgen_test_layout_iw_michaelmicfailure() {
    assert_eq!(
        ::std::mem::size_of::<iw_michaelmicfailure>(),
        28usize,
        concat!("Size of: ", stringify!(iw_michaelmicfailure))
    );
    assert_eq!(
        ::std::mem::align_of::<iw_michaelmicfailure>(),
        4usize,
        concat!("Alignment of ", stringify!(iw_michaelmicfailure))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_michaelmicfailure>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_michaelmicfailure),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_michaelmicfailure>())).src_addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_michaelmicfailure),
            "::",
            stringify!(src_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_michaelmicfailure>())).tsc as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_michaelmicfailure),
            "::",
            stringify!(tsc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iw_pmkid_cand {
    pub flags: __u32,
    pub index: __u32,
    pub bssid: sockaddr,
}
#[test]
fn bindgen_test_layout_iw_pmkid_cand() {
    assert_eq!(
        ::std::mem::size_of::<iw_pmkid_cand>(),
        24usize,
        concat!("Size of: ", stringify!(iw_pmkid_cand))
    );
    assert_eq!(
        ::std::mem::align_of::<iw_pmkid_cand>(),
        4usize,
        concat!("Alignment of ", stringify!(iw_pmkid_cand))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_pmkid_cand>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_pmkid_cand),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_pmkid_cand>())).index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_pmkid_cand),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_pmkid_cand>())).bssid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_pmkid_cand),
            "::",
            stringify!(bssid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iw_statistics {
    pub status: __u16,
    pub qual: iw_quality,
    pub discard: iw_discarded,
    pub miss: iw_missed,
}
#[test]
fn bindgen_test_layout_iw_statistics() {
    assert_eq!(
        ::std::mem::size_of::<iw_statistics>(),
        32usize,
        concat!("Size of: ", stringify!(iw_statistics))
    );
    assert_eq!(
        ::std::mem::align_of::<iw_statistics>(),
        4usize,
        concat!("Alignment of ", stringify!(iw_statistics))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_statistics>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_statistics),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_statistics>())).qual as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_statistics),
            "::",
            stringify!(qual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_statistics>())).discard as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_statistics),
            "::",
            stringify!(discard)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_statistics>())).miss as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_statistics),
            "::",
            stringify!(miss)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iwreq_data {
    pub name: [::std::os::raw::c_char; 16usize],
    pub essid: iw_point,
    pub nwid: iw_param,
    pub freq: iw_freq,
    pub sens: iw_param,
    pub bitrate: iw_param,
    pub txpower: iw_param,
    pub rts: iw_param,
    pub frag: iw_param,
    pub mode: __u32,
    pub retry: iw_param,
    pub encoding: iw_point,
    pub power: iw_param,
    pub qual: iw_quality,
    pub ap_addr: sockaddr,
    pub addr: sockaddr,
    pub param: iw_param,
    pub data: iw_point,
    _bindgen_union_align: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_iwreq_data() {
    assert_eq!(
        ::std::mem::size_of::<iwreq_data>(),
        16usize,
        concat!("Size of: ", stringify!(iwreq_data))
    );
    assert_eq!(
        ::std::mem::align_of::<iwreq_data>(),
        8usize,
        concat!("Alignment of ", stringify!(iwreq_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iwreq_data>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iwreq_data),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iwreq_data>())).essid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iwreq_data),
            "::",
            stringify!(essid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iwreq_data>())).nwid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iwreq_data),
            "::",
            stringify!(nwid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iwreq_data>())).freq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iwreq_data),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iwreq_data>())).sens as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iwreq_data),
            "::",
            stringify!(sens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iwreq_data>())).bitrate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iwreq_data),
            "::",
            stringify!(bitrate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iwreq_data>())).txpower as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iwreq_data),
            "::",
            stringify!(txpower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iwreq_data>())).rts as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iwreq_data),
            "::",
            stringify!(rts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iwreq_data>())).frag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iwreq_data),
            "::",
            stringify!(frag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iwreq_data>())).mode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iwreq_data),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iwreq_data>())).retry as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iwreq_data),
            "::",
            stringify!(retry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iwreq_data>())).encoding as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iwreq_data),
            "::",
            stringify!(encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iwreq_data>())).power as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iwreq_data),
            "::",
            stringify!(power)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iwreq_data>())).qual as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iwreq_data),
            "::",
            stringify!(qual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iwreq_data>())).ap_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iwreq_data),
            "::",
            stringify!(ap_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iwreq_data>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iwreq_data),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iwreq_data>())).param as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iwreq_data),
            "::",
            stringify!(param)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iwreq_data>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iwreq_data),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iwreq {
    pub ifr_ifrn: iwreq__bindgen_ty_1,
    pub u: iwreq_data,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iwreq__bindgen_ty_1 {
    pub ifrn_name: [::std::os::raw::c_char; 16usize],
    _bindgen_union_align: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_iwreq__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<iwreq__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(iwreq__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<iwreq__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(iwreq__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iwreq__bindgen_ty_1>())).ifrn_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iwreq__bindgen_ty_1),
            "::",
            stringify!(ifrn_name)
        )
    );
}
#[test]
fn bindgen_test_layout_iwreq() {
    assert_eq!(
        ::std::mem::size_of::<iwreq>(),
        32usize,
        concat!("Size of: ", stringify!(iwreq))
    );
    assert_eq!(
        ::std::mem::align_of::<iwreq>(),
        8usize,
        concat!("Alignment of ", stringify!(iwreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iwreq>())).ifr_ifrn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iwreq),
            "::",
            stringify!(ifr_ifrn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iwreq>())).u as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(iwreq), "::", stringify!(u))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iw_range {
    pub throughput: __u32,
    pub min_nwid: __u32,
    pub max_nwid: __u32,
    pub old_num_channels: __u16,
    pub old_num_frequency: __u8,
    pub scan_capa: __u8,
    pub event_capa: [__u32; 6usize],
    pub sensitivity: __s32,
    pub max_qual: iw_quality,
    pub avg_qual: iw_quality,
    pub num_bitrates: __u8,
    pub bitrate: [__s32; 32usize],
    pub min_rts: __s32,
    pub max_rts: __s32,
    pub min_frag: __s32,
    pub max_frag: __s32,
    pub min_pmp: __s32,
    pub max_pmp: __s32,
    pub min_pmt: __s32,
    pub max_pmt: __s32,
    pub pmp_flags: __u16,
    pub pmt_flags: __u16,
    pub pm_capa: __u16,
    pub encoding_size: [__u16; 8usize],
    pub num_encoding_sizes: __u8,
    pub max_encoding_tokens: __u8,
    pub encoding_login_index: __u8,
    pub txpower_capa: __u16,
    pub num_txpower: __u8,
    pub txpower: [__s32; 8usize],
    pub we_version_compiled: __u8,
    pub we_version_source: __u8,
    pub retry_capa: __u16,
    pub retry_flags: __u16,
    pub r_time_flags: __u16,
    pub min_retry: __s32,
    pub max_retry: __s32,
    pub min_r_time: __s32,
    pub max_r_time: __s32,
    pub num_channels: __u16,
    pub num_frequency: __u8,
    pub freq: [iw_freq; 32usize],
    pub enc_capa: __u32,
}
#[test]
fn bindgen_test_layout_iw_range() {
    assert_eq!(
        ::std::mem::size_of::<iw_range>(),
        568usize,
        concat!("Size of: ", stringify!(iw_range))
    );
    assert_eq!(
        ::std::mem::align_of::<iw_range>(),
        4usize,
        concat!("Alignment of ", stringify!(iw_range))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).throughput as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(throughput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).min_nwid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(min_nwid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).max_nwid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(max_nwid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).old_num_channels as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(old_num_channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).old_num_frequency as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(old_num_frequency)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).scan_capa as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(scan_capa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).event_capa as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(event_capa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).sensitivity as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(sensitivity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).max_qual as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(max_qual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).avg_qual as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(avg_qual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).num_bitrates as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(num_bitrates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).bitrate as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(bitrate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).min_rts as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(min_rts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).max_rts as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(max_rts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).min_frag as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(min_frag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).max_frag as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(max_frag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).min_pmp as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(min_pmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).max_pmp as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(max_pmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).min_pmt as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(min_pmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).max_pmt as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(max_pmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).pmp_flags as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(pmp_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).pmt_flags as *const _ as usize },
        218usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(pmt_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).pm_capa as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(pm_capa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).encoding_size as *const _ as usize },
        222usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(encoding_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).num_encoding_sizes as *const _ as usize },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(num_encoding_sizes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).max_encoding_tokens as *const _ as usize },
        239usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(max_encoding_tokens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).encoding_login_index as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(encoding_login_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).txpower_capa as *const _ as usize },
        242usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(txpower_capa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).num_txpower as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(num_txpower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).txpower as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(txpower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).we_version_compiled as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(we_version_compiled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).we_version_source as *const _ as usize },
        281usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(we_version_source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).retry_capa as *const _ as usize },
        282usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(retry_capa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).retry_flags as *const _ as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(retry_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).r_time_flags as *const _ as usize },
        286usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(r_time_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).min_retry as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(min_retry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).max_retry as *const _ as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(max_retry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).min_r_time as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(min_r_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).max_r_time as *const _ as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(max_r_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).num_channels as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(num_channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).num_frequency as *const _ as usize },
        306usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(num_frequency)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).freq as *const _ as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_range>())).enc_capa as *const _ as usize },
        564usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_range),
            "::",
            stringify!(enc_capa)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iw_priv_args {
    pub cmd: __u32,
    pub set_args: __u16,
    pub get_args: __u16,
    pub name: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_iw_priv_args() {
    assert_eq!(
        ::std::mem::size_of::<iw_priv_args>(),
        24usize,
        concat!("Size of: ", stringify!(iw_priv_args))
    );
    assert_eq!(
        ::std::mem::align_of::<iw_priv_args>(),
        4usize,
        concat!("Alignment of ", stringify!(iw_priv_args))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_priv_args>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_priv_args),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_priv_args>())).set_args as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_priv_args),
            "::",
            stringify!(set_args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_priv_args>())).get_args as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_priv_args),
            "::",
            stringify!(get_args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_priv_args>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_priv_args),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iw_event {
    pub len: __u16,
    pub cmd: __u16,
    pub u: iwreq_data,
}
#[test]
fn bindgen_test_layout_iw_event() {
    assert_eq!(
        ::std::mem::size_of::<iw_event>(),
        24usize,
        concat!("Size of: ", stringify!(iw_event))
    );
    assert_eq!(
        ::std::mem::align_of::<iw_event>(),
        8usize,
        concat!("Alignment of ", stringify!(iw_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_event>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_event),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_event>())).cmd as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_event),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iw_event>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iw_event),
            "::",
            stringify!(u)
        )
    );
}
